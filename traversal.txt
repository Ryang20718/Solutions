Post:
Until all nodes are traversed −
Step 1 − Recursively traverse left subtree.
Step 2 − Recursively traverse right subtree.
Step 3 − Visit root node.

Pre:
Until all nodes are traversed −
Step 1 − Visit root node.
Step 2 − Recursively traverse left subtree.
Step 3 − Recursively traverse right subtree.

In:
Until all nodes are traversed −
Step 1 − Recursively traverse left subtree.
Step 2 − Visit root node.
Step 3 − Recursively traverse right subtree.

In: non recursive
class Solution:
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        array = []
        stac = []
        current = root
        done = 0
        while(not done):
            if(current != None):
                stac.append(current)# if not done yet, append current to stack and move current to left tree
                current = current.left
            elif(current == None):# if no left, then check stack and if stack isn't empty, print last node, append current move to right subtree
                if(len(stac) > 0):
                    current = stac.pop()
                    array.append(current.val)
                    current = current.right
                else:
                    done = 1
        return array




Level Order:
add root to queue 
while not empty
    visit queue[0]
    pop queue[0]
    
    if(applicable)
    queue.append(queue[0].left)
    
    if applicable
    queue.append(queue[0].right)